/**
 * @file city_search.js
 * @description Returns an array of all cities matching your search, 
 * and their basic information. Includes a "Key" for that city 
 * that can be used to get forecast data. 
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status          = require('@converseai/plugins-sdk').Status;
const ModuleResponse  = require('@converseai/plugins-sdk').Payloads.Module.ModuleResponse;

module.exports = function city_search (app, body) {
 /**
  * Registration parameters are assigned to body.payload.registrationData
  * and Module parameters are assigned to body.payload.moduleParam.
  * @example
  * var regOne = body.payload.registrationData.regOne;
  * var modOne = body.payload.moduleParam.modOne;
  */

  /** @type {String} apiKey AccuWeather API Key. Can be obtained by 
  * registering at https://developer.accuweather.com/  */
  var apiKey = body.payload.registrationData.api_key;


  /** @type {String} searchText The name of the city to search for  */
  var searchText = body.payload.moduleParam.search_text;

  if (apiKey != undefined && searchText != undefined) { 
    /** @type {ModuleResponse} response The Converse AI response to respond with. */
    var response = new ModuleResponse();
  
    /*
    * Set an array of comments on the response. Each comment will result in a
    * separate reply on the current conversation by the system.
    */
    response.setMessage();
  
    /*
    * Set an object on the response. This object will be returned to and stored
    * on the current conversation state. It is important to ensure the JSON
    * definition of this module has `hasReturn` set to true. E.g. if this module
    * is fired from a state called `myState` then the object can be accessed with
    * handlebars like:
    * {{states.myState.davocarli_accuweather.city_search}}
    */
    response.setValue({});
  
    /*
    * This will return a success status and response to the conversation.
    * It is important to always call this method when the module has finished
    * computing regardless of whether you wish to send a response or not. If not,
    * the conversation will hang indefinitely.
    */
    app.send(Status.SUCCESS, response);
  } else { 
    app.fail({ httpStatus: 400, code: 'REQUIRED_PARAMS_UNDEFINED', description: 'Required parameters are undefined.' }); 
  }
};
